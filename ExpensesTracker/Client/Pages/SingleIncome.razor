@page "/income"
@page "/income/{id:int}"
@inject IIncomesService IncomesService
@inject NavigationManager NavigationManager

<h3>Income</h3>

<EditForm Model="income" OnValidSubmit="@Submit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div>
		<label for="money"> Money</label>
		<InputNumber id="money" @bind-Value="income.Money"></InputNumber>
	</div>
	<div>
		<label> Date </label>
		<InputSelect @bind-Value="income.Year">
			@foreach (var year in Dates.Years)
			{
				<option value="@year">@year</option>
			}
		</InputSelect>
		<InputSelect @bind-Value="income.Month">
			@foreach (var month in Enum.GetValues(typeof(Dates.Months)))
			{
				<option value="@((int)month)">@month</option>
			}
		</InputSelect>
	</div>
	<br />
	<button type="submit" class="btn btn-primary">Submit</button>
	<button type="submit" class="btn btn-danger" @onclick="GoBack"> Cancel</button>
</EditForm>

@code {
	[Parameter]
	public int? Id { get; set; }

	Income income = new Income ();

	protected override async Task OnParametersSetAsync()
	{
		if (Id == null)
		{
			DateTime currentDate = DateTime.Now;
			income.Year = currentDate.Year;
			income.Month = currentDate.Month;
		}
		else
		{
			income = await IncomesService.GetSingleIncome((int)Id);
		}
	}

	public void GoBack()
	{
		NavigationManager.NavigateTo("/incomes");
	}

	async Task Submit()
	{
		if (Id == null)
		{
			await IncomesService.CreateIncome(income);
		}
		else
		{
			await IncomesService.UpdateIncome(income);
		}
	}
}
